{"version":3,"file":"static/js/458.197da749.chunk.js","mappings":"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","sources":["Component/CreditReportModal/PrintReportModal.js","Component/Pagination/DisplayEntries.js","Component/Pagination/index.js","Component/PaginationBlock/index.js","Component/Pagination/PaginationLimit.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./modal.css\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PaginationLimit from \"../Pagination/PaginationLimit\";\r\nimport PaginationBlock from \"../PaginationBlock\";\r\nimport {\r\n  getNext,\r\n  getParticularPage,\r\n  getPrevious,\r\n} from \"../../Redux/CreditPrintReport/thunk\";\r\n\r\nconst PrintsReportModal = ({\r\n  showPrintReportModal,\r\n  setShowPrintReportModal,\r\n  formData,\r\n  prints,\r\n}) => {\r\n  const { district, branch, user, formatedStartDate, formatedEndDate } =\r\n    formData;\r\n  const loading = useSelector((state) => state.creditPrintReport.loading);\r\n  const count = useSelector((state) => state.creditPrintReport.count);\r\n  const previous = useSelector((state) => state.creditPrintReport.previous);\r\n  const next = useSelector((state) => state.creditPrintReport.next);\r\n  const dispatch = useDispatch();\r\n  const modalClass = showPrintReportModal\r\n    ? \"modal display-block\"\r\n    : \"modal display-none\";\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [maxPageNumberLimit, setMaxPageNumberLimit] = useState(5);\r\n  const [minPageNumberLimit, setMinPageNumberLimit] = useState(0);\r\n  const [postsPerPage, setPostsPerPage] = useState(10);\r\n  const pageNumberLimit = 5;\r\n  //change page\r\n  const paginate = (number) => {\r\n    dispatch(\r\n      getParticularPage({\r\n        number,\r\n        postsPerPage,\r\n        district,\r\n        branch,\r\n        user,\r\n        formatedStartDate,\r\n        formatedEndDate,\r\n      })\r\n    );\r\n    setCurrentPage(number);\r\n  };\r\n\r\n  //handle Click\r\n  const handleClick = (type) => {\r\n    if (type === \"previous\") {\r\n      dispatch(getPrevious(previous));\r\n      setCurrentPage((prevState) => prevState - 1);\r\n      if ((currentPage - 1) % pageNumberLimit === 0) {\r\n        setMaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\r\n        setMinPageNumberLimit(minPageNumberLimit - pageNumberLimit);\r\n      }\r\n    } else if (type === \"next\") {\r\n      dispatch(getNext(next));\r\n      setCurrentPage((prevState) => prevState + 1);\r\n      if (currentPage + 1 > maxPageNumberLimit) {\r\n        setMaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\r\n        setMinPageNumberLimit(minPageNumberLimit + pageNumberLimit);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={modalClass} tabIndex=\"-1\">\r\n        <div className=\"container-fluid main-container\">\r\n          <div className=\"modal-content content\">\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                Card Print Report\r\n              </h5>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn-close\"\r\n                data-dismiss=\"modal\"\r\n                aria-label=\"Close\"\r\n                onClick={() => setShowPrintReportModal(false)}\r\n              >\r\n                <span aria-hidden=\"true\">&times;</span>\r\n              </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              {prints?.length > 0 && (\r\n                <>\r\n                  <div className=\"col-6\">\r\n                    <PaginationLimit\r\n                      postsPerPage={postsPerPage}\r\n                      setPostsPerPage={setPostsPerPage}\r\n                    />\r\n                  </div>\r\n                </>\r\n              )}\r\n              {loading ? (\r\n                <div className=\"d-flex justify-content-center \">\r\n                  <div className=\"spinner-border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  {prints?.length === 0 ? (\r\n                    \"You have No records\"\r\n                  ) : (\r\n                    <table className=\"table table table-bordered \">\r\n                      <thead className=\"text-center\">\r\n                        <tr className=\"text-center\">\r\n                          <th scope=\"col\">#</th>\r\n                          <th scope=\"col\">Card No</th>\r\n                          <th scope=\"col\">Name </th>\r\n                          <th scope=\"col\">Address</th>\r\n                          <th scope=\"col\">Mobile Number</th>\r\n                          <th scope=\"col\">Branch</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {prints?.length > 0 &&\r\n                          prints.map((detail, i) => {\r\n                            const {\r\n                              id,\r\n                              card_no,\r\n                              first_name_nepali,\r\n                              middle_name_nepali,\r\n                              last_name_nepali,\r\n                              address_nepali,\r\n                              mobile_no_nepali,\r\n                              branch,\r\n                            } = detail;\r\n                            return (\r\n                              <tr key={id} className=\"text-center\">\r\n                                <td>\r\n                                  {\" \"}\r\n                                  {postsPerPage * (currentPage - 1) + (i + 1)}\r\n                                </td>\r\n                                <td>{card_no}</td>\r\n\r\n                                <td>\r\n                                  {first_name_nepali +\r\n                                    \" \" +\r\n                                    middle_name_nepali +\r\n                                    \" \" +\r\n                                    last_name_nepali}\r\n                                </td>\r\n                                <td>{address_nepali}</td>\r\n                                <td>{mobile_no_nepali}</td>\r\n                                <td>{branch.name}</td>\r\n                              </tr>\r\n                            );\r\n                          })}\r\n                      </tbody>\r\n                    </table>\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n            {count > 0 && (\r\n              <PaginationBlock\r\n                currentPage={currentPage}\r\n                postsPerPage={postsPerPage}\r\n                count={count}\r\n                paginate={paginate}\r\n                handleClick={handleClick}\r\n                setCurrentPage={setCurrentPage}\r\n                minPageNumberLimit={minPageNumberLimit}\r\n                maxPageNumberLimit={maxPageNumberLimit}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>{\" \"}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default React.memo(PrintsReportModal);\r\n","import React from \"react\";\r\n\r\nconst DisplayEntries = ({ offset, limit, count }) => {\r\n  return(\r\n    <React.Fragment>\r\n      <p>\r\n        Showing {offset} to{\" \"}\r\n        {limit > count ? count : limit === 0 ? count : limit} of {count} entries\r\n      </p>  \r\n    </React.Fragment> \r\n  );\r\n};\r\n\r\nexport default React.memo(DisplayEntries);","import React from \"react\";\r\nconst Pagination = ({\r\n  postsPerPage,\r\n  totalPosts,\r\n  paginate,\r\n  handleClick,\r\n  currentPage,\r\n  maxPageNumberLimit,\r\n  minPageNumberLimit,\r\n}) => {\r\n  const pageNumbers = [];\r\n  if (postsPerPage > 0) {\r\n    for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n      pageNumbers.push(i);\r\n    }\r\n  }\r\n  let pageIncrementBtn = null;\r\n  if (pageNumbers.length > maxPageNumberLimit) {\r\n    pageIncrementBtn = (\r\n      <button className=\"page-link\" onClick={() => handleClick(\"next\")}>\r\n        &hellip;\r\n      </button>\r\n    );\r\n  }\r\n\r\n  let pageDecrementBtn = null;\r\n  if (minPageNumberLimit >= 1) {\r\n    pageDecrementBtn = (\r\n      <button className=\"page-link\" onClick={() => handleClick(\"previous\")}>\r\n        &hellip;\r\n      </button>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <ul className=\"pagination pagination-sm justify-content-end\">\r\n        <li className=\"page-item \">\r\n          <button\r\n            className=\"page-link\"\r\n            onClick={() => handleClick(\"previous\")}\r\n            disabled={currentPage === pageNumbers[0] ? true : false}\r\n          >\r\n            &laquo;\r\n          </button>\r\n        </li>\r\n        {/* {pageDecrementBtn} */}\r\n        {pageNumbers.map((number, i) => {\r\n          if (number < maxPageNumberLimit + 1 && number > minPageNumberLimit) {\r\n            return (\r\n              <li className=\"page-item\" key={number}>\r\n                <button\r\n                  onClick={() => paginate(number)}\r\n                  className={`page-link ${\r\n                    i + 1 === currentPage ? \"active\" : null\r\n                  }`}\r\n                >\r\n                  {number}\r\n                </button>\r\n              </li>\r\n            );\r\n          } else {\r\n            return null;\r\n          }\r\n        })}\r\n        {/* {pageIncrementBtn} */}\r\n        <li className=\"page-item\">\r\n          <button\r\n            className=\"page-link\"\r\n            onClick={() => handleClick(\"next\")}\r\n            disabled={\r\n              currentPage === pageNumbers[pageNumbers.length - 1] ? true : false\r\n            }\r\n          >\r\n            &raquo;\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Pagination);\r\n","import React from \"react\";\r\nimport DisplayEntries from \"../Pagination/DisplayEntries\";\r\nimport Pagination from \"../Pagination\";\r\nconst index = ({\r\n  currentPage,\r\n  postsPerPage,\r\n  count,\r\n  paginate,\r\n  handleClick,\r\n  setCurrentPage,\r\n  minPageNumberLimit,\r\n  maxPageNumberLimit,\r\n}) => {\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-6\">\r\n          <DisplayEntries\r\n            offset={1 + (currentPage - 1) * postsPerPage}\r\n            limit={postsPerPage * currentPage}\r\n            count={count}\r\n          />\r\n        </div>\r\n        {postsPerPage < count && (\r\n          <div className=\"col-6 text-right\">\r\n            <Pagination\r\n              postsPerPage={postsPerPage}\r\n              totalPosts={count}\r\n              paginate={paginate}\r\n              handleClick={handleClick}\r\n              currentPage={currentPage}\r\n              setCurrentPage={setCurrentPage}\r\n              minPageNumberLimit={minPageNumberLimit}\r\n              maxPageNumberLimit={maxPageNumberLimit}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default index;\r\n","import React from \"react\";\r\n\r\nconst PaginationLimit = ({ postsPerPage, setPostsPerPage }) => {\r\n  const handleChange = (e) => {\r\n    const data = Number(e.target.value);\r\n    setPostsPerPage(data);\r\n  };\r\n  return (\r\n    <>\r\n      <p className=\"fw-normal p-0 m-0\">\r\n        Show\r\n        <span className=\"ml-1 mr-1\">\r\n          {\" \"}\r\n          <select value={postsPerPage} onChange={handleChange}>\r\n            <option value=\"10\">10</option>\r\n            <option value=\"20\">20</option>\r\n            <option value=\"40\">40</option>\r\n            <option value=\"99999999\">All</option>\r\n          </select>\r\n        </span>{\" \"}\r\n        entries\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(PaginationLimit);"],"names":["PrintsReportModal","showPrintReportModal","setShowPrintReportModal","formData","prints","district","branch","user","formatedStartDate","formatedEndDate","loading","useSelector","state","creditPrintReport","count","previous","next","dispatch","useDispatch","modalClass","useState","currentPage","setCurrentPage","maxPageNumberLimit","setMaxPageNumberLimit","minPageNumberLimit","setMinPageNumberLimit","postsPerPage","setPostsPerPage","className","tabIndex","id","type","onClick","length","PaginationLimit","role","scope","map","detail","i","card_no","first_name_nepali","middle_name_nepali","last_name_nepali","address_nepali","mobile_no_nepali","name","PaginationBlock","paginate","number","getParticularPage","handleClick","getPrevious","prevState","getNext","React","DisplayEntries","offset","limit","Pagination","totalPosts","pageNumbers","Math","ceil","push","disabled","value","onChange","e","data","Number","target"],"sourceRoot":""}